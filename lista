// DatabaseHelper.cs
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace Projekt
{
    public class DatabaseHelper
    {
        private string _connectionString;

        public DatabaseHelper(string connectionString)
        {
            _connectionString = connectionString;
        }

        public List<Product> GetProducts()
        {
            var products = new List<Product>();

            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();

                string query = "SELECT ID, Name, Count, Price FROM Products";
                using (SqlCommand command = new SqlCommand(query, connection))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Product product = new Product
                        {
                            ID = reader.GetInt32(0),
                            Name = reader.GetString(1),
                            Count = reader.GetInt32(2),
                            Price = reader.GetDouble(3)
                        };
                        products.Add(product);
                    }
                }
            }

            return products;
        }
    }

    public class Product
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }
        public double Price { get; set; }
    }
}

// Program.cs
using System;
using System.Linq;

namespace Projekt
{
    class Program
    {
        static void Main(string[] args)
        {
            string connectionString = "your_connection_string_here"; // Podaj odpowiedni connection string do bazy danych
            DatabaseHelper dbHelper = new DatabaseHelper(connectionString);

            Console.WriteLine("Łączenie z bazą danych...");
            var products = dbHelper.GetProducts().ToArray();

            Console.WriteLine("\nRACHUNEK:");
            double sumPrice = 0;

            // Nagłówek tabeli
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(new string('-', 60));
            Console.WriteLine("| {0,-5} | {1,-20} | {2,-10} | {3,-10} |", "Ilość", "Produkt", "Cena Jedn.", "Razem");
            Console.WriteLine(new string('-', 60));

            foreach (var product in products)
            {
                double totalPrice = product.Price * product.Count;

                // Wiersz tabeli dla każdego produktu
                Console.WriteLine("| {0,-5} | {1,-20} | {2,-10:C} | {3,-10:C} |", product.Count, product.Name, product.Price, totalPrice);

                sumPrice += totalPrice;
            }

            // Stopka tabeli
            Console.WriteLine(new string('-', 60));
            Console.ResetColor();

            // Łączna suma wszystkich produktów
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\nSuma do zapłaty: {0:C}", sumPrice);

            double cash = 0.0;
            do
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Otrzymana gotówka:");
                if (double.TryParse(Console.ReadLine(), out cash) && cash > 0)
                {
                    double rest = cash - sumPrice;
                    if (rest >= 0)
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("Reszta: {0:C}", rest);
                        break;
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Nie stać Cię.");
                        Console.ResetColor();
                    }
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Błędna wartość, podaj kwotę.");
                    Console.ResetColor();
                }
            } while (true);

            bool close = false;

            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("\n==================================");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("               MENU               ");
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("==================================");
            Console.ResetColor();

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("1. Pokaż najtańszy produkt");
            Console.WriteLine("2. Pokaż najdroższy produkt");
            Console.WriteLine("3. Pokaż liczbę wszystkich produktów");
            Console.WriteLine("4. Pokaż produkt, którego sprzedano najwięcej");
            Console.WriteLine("5. Pokaż produkt, którego sprzedano najmniej");
            Console.WriteLine("6. Wyjście");
            Console.ResetColor();

            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("==================================");
            Console.ResetColor();

            do
            {
                int opcja;
                do
                {
                    Console.WriteLine("Wybierz opcję (1-6): ");
                    if (int.TryParse(Console.ReadLine(), out opcja) && opcja >= 1 && opcja <= 6)
                    {
                        break;
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Błędna wartość, wybierz opcję z zakresu 1-6.");
                        Console.ResetColor();
                    }
                } while (true);

                switch (opcja)
                {
                    case 1:
                        var minPriceProduct = products.OrderBy(p => p.Price).First();
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        Console.WriteLine($"Najtańszy produkt: {minPriceProduct.Name}, cena: {minPriceProduct.Price:C}");
                        break;
                    case 2:
                        var maxPriceProduct = products.OrderByDescending(p => p.Price).First();
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        Console.WriteLine($"Najdroższy produkt: {maxPriceProduct.Name}, cena: {maxPriceProduct.Price:C}");
                        break;
                    case 3:
                        int totalCount = products.Sum(p => p.Count);
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        Console.WriteLine($"Łączna liczba sprzedanych produktów: {totalCount}");
                        break;
                    case 4:
                        var maxSoldProduct = products.OrderByDescending(p => p.Count).First();
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        Console.WriteLine($"Produkt, którego sprzedano najwięcej: {maxSoldProduct.Name}, ilość: {maxSoldProduct.Count}");
                        break;
                    case 5:
                        var minSoldProduct = products.OrderBy(p => p.Count).First();
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        Console.WriteLine($"Produkt, którego sprzedano najmniej: {minSoldProduct.Name}, ilość: {minSoldProduct.Count}");
                        break;
                    case 6:
                        close = true;
                        break;
                }
            } while (!close);
        }
    }
}
